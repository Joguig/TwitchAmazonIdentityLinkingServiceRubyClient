# GAT Trace
#
# == Description
# Every trace has three pieces of data:
# * origin_id, a.k.a trace id. It is a UUID
# * parent_interaction_id, a.k. pid. The interaction id 
#   for the previous parent interaction.
# * depth. The depth of the current node in the call tree.
#
# For detail explanation on each field, please check 
# "Amazon Global Action Trace" specification V1 at 
# https://w.amazon.com/index.php/GAT.
#
# Gat id format: amzn1.tr.#{origin_id}.0.#{pid}.#{iid}
# * origin_id is a UUID 
# * pid and iid are 6-letter base-64 encoded random number. 
#
# Gat id example: amzn1.tr.f4a77e7a-72b9-11e2-aa32-0ae30a190a19.0..ODc0OT
#
# == Examples
#
# === Create a trace
# require 'amazon/gat/trace'
# trace = Amazon::Gat::Trace.new({
#           :origin_id => "f4a77e7a-72b9-11e2-aa32-0ae30a190a19",
#           :parent_interaction_id => "fa3b45",
#           :depth => 1 
#           })
#
# === Create a trace from gat_id
# require 'amazon/gat/trace'
#
# gat_id = "amzn1.tr.f4a77e7a-72b9-11e2-aa32-0ae30a190a19.0..ODc0OT"
# trace = Amazon::Gat::Trace.parse_gat_id_to_trace(gat_id)

require 'securerandom'
require 'amazon/gat/constants'
require 'amazon/gat/uuid'

module Amazon
  module Gat
    class Trace
      attr_accessor :origin_id, :parent_interaction_id, :depth

      def initialize(config={})
        @origin_id = config[:origin_id] || UUID.gat_uuid
        @parent_interaction_id = config[:parent_interaction_id] || ""
        @depth = config[:depth] || 0
        @depth += 1 if config[:increment_depth]
      end

      def to_s
        "%s:%s;%s:%s;%s:%s;" % 
        [ Amazon::Gat::Constants::TRACE_ORIGIN_ID[:name], 
          @origin_id, 
          Amazon::Gat::Constants::TRACE_DEPTH[:name], 
          @depth, 
          Amazon::Gat::Constants::TRACE_PID[:name], 
          @parent_interaction_id 
        ]
      end

      def eql?(o)
        @origin_id.eql?(o.origin_id) &&
        @parent_interaction_id.eql?(o.parent_interaction_id) &&
        @depth.eql?(o.depth)
      end

      def ==(o)
        eql?(o)
      end

      def hash
        to_s.hash
      end

      #
      # parse gat_id to trace object.
      #
      # gat_id is generated by Span.generate_gat_id.
      #
      def self.parse_gat_id_to_trace(gat_id)
        return nil if gat_id.nil? or gat_id.empty?

        parts = gat_id.split(/\./)
        Trace.new({
          :origin_id => parts[2],
          :depth => parts[3].to_i,
          :parent_interaction_id => parts[5],
          :increment_depth => true
        })
      end
    end
  end
end
